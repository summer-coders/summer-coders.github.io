$sqSize: 30px;
$contW: 100%;
$contH: 100%;
$xSpaces: 12;
$ySpaces: 12;
$xAngle: 45deg;
$zAngle: 45deg;
$sqrt2: 1.414;
$dur: 10s;

// Colors
$bl: #6397a5;
$br: #753;
$dbr: #642;
$gn: #474;
$lgn: #6a6;
$gy: #888;
$dgy: #666;
$t: transparent;

// * Block placement
// parameters: x-pos,y-pos,z-pos, width,depth,height, color
$blocks:
	// bridges
	(5,10.5,1.75, 0.5,2,0.75, $gy)
	(5,10.5,2.5, 3,2,0.5, $gy)
	(5,12,3, 3,0.5,0.5, $gy)
	(5,10.5,3, 3,0.5,0.5, $gy)
	(10.5,4,2.5, 2,4,0.5, $gy)
	(12,4,3, 0.5,4,0.5, $gy)
	(10.5,4,3, 0.5,4,0.5, $gy)
	(10.5,4,1.75, 2,0.5,0.75, $gy)
	(10.5,3.5,2, 2,0.5,0.5, $gn)

	// hill
	(9,9,3.5, 4,4,0.5, $gn)
	(8.5,8.5,3, 4.5,4.5,0.5, $gn)
	(8,8,2.5, 5,5,0.5, $gn)
	(7.5,7.5,2, 5.5,5.5,0.5, $gn)
	(7,7,1, 6,6,1, $gn)

	// river
	(7,4,1, 6,3,0.75, $bl)
	(5,4,1, 2,9,0.75, $bl)

	// tunnel
	(4,12,3, 0.5,0.5,1.5, $gy)
	(4,10.5,3, 0.5,0.5,1.5, $gy)
	(4,10.5,4.5, 0.5,2,0.5, $gy)
	(1,12,3, 3,1,1.5, $gn)
	(3,7,3, 1,4,1.5, $gn)
	(1,7,3, 1,5,1.5, $gn)
	(1.5,10.5,4.5, 2.5,2,0.5, $gn)
	(1.5,7,4.5, 2,3.5,0.5, $gn)
	(3,6.5,3, 0.5,0.5,1.5, $gy)
	(1.5,6.5,3, 0.5,0.5,1.5, $gy)
	(1.5,6.5,4.5, 2,0.5,0.5, $gy)

	// ground
	(4,1,1, 9,3,1, $gn)
	(1,6,1, 4,7,2, $gn)
	(1,5.5,2, 4,0.5,0.5, $gn)
	(1,1,1, 4,5,1, $gn)
	
	// trees
	(4.33,9.33,3, 0.33,0.33,0.5, $br)
	(4.25,9.25,3.5, 0.5,0.5,0.75, $lgn)
	(4.33,8.33,3, 0.33,0.33,0.5, $br)
	(4.25,8.25,3.5, 0.5,0.5,1, $lgn)
	(4.33,7.33,3, 0.33,0.33,0.5, $br)
	(4.25,7.25,3.5, 0.5,0.5,0.75, $lgn)
	
	(9.33,12.33,4, 0.33,0.33,0.5, $br)
	(9.25,12.25,4.5, 0.5,0.5,0.75, $lgn)
	(10.33,12.33,4, 0.33,0.33,0.5, $br)
	(10.25,12.25,4.5, 0.5,0.5,1, $lgn)
	(11.33,12.33,4, 0.33,0.33,0.5, $br)
	(11.25,12.25,4.5, 0.5,0.5,0.75, $lgn)
	(12.33,12.33,4, 0.33,0.33,0.5, $br)
	(12.25,12.25,4.5, 0.5,0.5,1, $lgn)
	;

// * Plate placement
// parameters: x-pos,y-pos,z-pos, width,depth, color, x-angle,y-angle,z-angle, x-origin,y-origin
$plates:
	// tracks
	(2,2,2.01, 1,1, $t, 0,0,180, 50%,50%)
	(3,2,2.01, 1,8, $t, 0,0,90, 50%,$sqSize*7.5)
	(11,2,2.01, 1,1, $t, 0,0,90, 50%,50%)
	(11,3,2.01, 1,$sqrt2, $t, -45,0,0, 50%,100%)
	(11,4,3.01, 1,4, $t, 0,0,0, 50%,50%)
	(11,8,3.01, 1,$sqrt2, $t, -45,0,0, 50%,100%)
	(11,9,4.01, 1,2, $t, 0,0,0, 50%,50%)
	(11,11,4.01, 1,1, $t, 0,0,0, 50%,50%)
	(10,11,4.01, 1,2, $t, 0,0,-90, 50%,$sqSize*1.5)
	(8,10.75,3.51, 1,$sqrt2, $t, 0,-45,90, 50%,50%)
	(3,11,3.01, 1,5, $t, 0,0,90, 50%,$sqSize*4.5)
	(2,11,3.01, 1,1, $t, 0,0,-90, 50%,50%)
	(2,6,3.01, 1,5, $t, 0,0,0, 50%,50%)
	(2,5,2.01, 1,$sqrt2, $t, -45,0,0, 50%,100%)
	(2,3,2.01, 1,2, $t, 0,0,0, 50%,50%)

	// darkness
	(2,6.5,3.01, 1,1.5, #000, -90,0,0, 50%,100%)
	(4.5,11,3.01, 1,1.5, #000, -90,90,0, 0%,100%)

	// train
	(9,2,2.02, 1,1, $t, 0,0,0, 50%,50%)
	(8,2,2.02, 1,1, $t, 0,0,0, 50%,50%)
	(7,2,2.02, 1,1, $t, 0,0,0, 50%,50%)
	(6,2,2.02, 1,1, $t, 0,0,0, 50%,50%)
	(5,2,2.02, 1,1, $t, 0,0,0, 50%,50%);

$plateCt: length($plates);

@mixin straight() {
	background-image:
		linear-gradient(90deg,$t 10%,$gy 10%,$gy 15%,$dgy 15%,$dgy 20%,$t 20%,$t 80%,$dgy 80%,$dgy 85%,$gy 85%,$gy 90%,$t 90%),
		repeating-linear-gradient($t,$t 6.25%, $br 6.25%, $br 12.5%, $dbr 12.5%, $dbr 18.75%, $t 18.75%, $t 25%);
}
@mixin curve() {
	background-image:
		radial-gradient(100% 100% at bottom left,$t 10%,$gy 10%,$gy 15%,$dgy 15%,$dgy 20%,$t 20%,$t 80%,$dgy 80%,$dgy 85%,$gy 85%,$gy 90%,$t 90%),
		linear-gradient(135deg,$t 45%, $br 45%, $br 50%, $dbr 50%, $dbr 55%, $t 55%),
		linear-gradient(165deg,$t 73%, $br 73%, $br 78%, $dbr 78%, $dbr 83%, $t 83%),
		linear-gradient(105deg,$t 17%, $br 17%, $br 22%, $dbr 22%, $dbr 27%, $t 27%);
	border-radius: 0 100% 0 0;
}

@mixin grid($c, $s) {
	$fontS: $s/3;
	$xC: #c00;
	$yC: #080;
	background-image:
		repeating-linear-gradient(
		180deg,
		$c,
		$c 1px,
		$t 1px,
		$t $s
	),
	repeating-linear-gradient(
		-90deg,
		$c,
		$c 1px,
		$t 1px,
		$t $s
	);
	border-bottom: 1px solid $xC;
	border-left: 1px solid $yC;
	&::before, &::after {
		display: block;
		font-size: $fontS;
		position: absolute;
		text-align: center;
		width: $fontS;
		height: $fontS;
	}
	&::before {
		color: $yC;
		content: "y";
		top: 0;
		left: -$fontS;
	}
	&::after {
		color: $xC;
		content: "x";
		right: 0;
		bottom: -$fontS;
	}
}
@mixin placeBlock($x, $y, $z, $w, $d, $h, $c) {
	display: inherit;
	transform: translate3d(
		$sqSize*($x - 1),
		$sqSize*(-$y - ($d - 1)),
		($sqSize*$z) + ($sqSize*($h - 1))
	);
	.block-inner div {
		background-color: $c;
		&.top, &.bottom {
			width: $sqSize * $w;
			height: $sqSize * $d;
		}
		&.top  {
			transform: rotateX(-90deg) translateY(-$sqSize*($d - 1));
		}
		&.bottom {
			transform: rotateX(-90deg) translateY(-$sqSize*($d - 1)) translateZ($sqSize*$h);
		}
		&.front, &.back, &.left, &.right {
			&:before {
				background-color: #000;
				content: "";
				width: 100%;
				height: 100%;
			}
		}
		&.front, &.back {
			width: $sqSize * $w;
			height: $sqSize * $h;
			&:before {
				opacity: 0.2;
			}
		}
		&.front {
			transform: translateZ($sqSize * ($d - 1));
		}
		&.left, &.right {
			width: $sqSize * $d;
			height: $sqSize * $h;
			&:before {
				opacity: 0.4;
			}
		}
		&.right {
			transform: rotateY(-270deg) translate3d($sqSize, 0, $sqSize*($w - $d));
		}
	}
}
@mixin placePlate($x, $y, $z, $w, $d, $c, $ax, $ay, $az, $xo, $yo) {
	background-color: $c;
	background-size: $sqSize $sqSize;
	display: inherit;
	font-size: $sqSize;
	line-height: $sqSize;
	width: $sqSize * $w;
	height: $sqSize * $d;
	transform: translate3d(
		$sqSize*($x - 1),
		$sqSize*(-$y + 1),
		$sqSize*($z - 1)
	) rotateX(0deg + $ax) rotateY(0deg + $ay) rotateZ(0deg + $az);
	transform-origin: $xo $yo;
}
// for animations
@mixin platePos($x,$y,$z) {
	transform: translate3d($sqSize*($x - 1),$sqSize*(-$y + 1),$sqSize*($z - 1));
}
@mixin trainRot($y,$z) {
	transform: translateZ($sqSize*0.5) rotateX(-90deg) rotateY(0deg + $y) rotateZ(0deg + $z);
}

* {
	box-sizing: border-box;
	margin: 0;
	padding: 0;
}
body {
	height: 100vh;
	margin: 0;
}
.container {
	background: #6cf;
	display: flex;
	margin: auto;
	overflow: hidden;
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	width: $contW;
	height: $contH;
	perspective: 800px;
	transform-style: preserve-3d;
}
.surface {
	//@include grid($gy, $sqSize);
	display: block;
	width: $sqSize * $xSpaces;
	height: $sqSize * $ySpaces;
	margin: auto;
	transform-style: preserve-3d;
	transform: rotateX($xAngle) rotateZ($zAngle);
	will-change: transform;
}
.block, .plate {
	display: none;
	transform-style: preserve-3d;
	position: absolute;
	bottom: 0;
}
.block-inner > div, .plate {
	width: $sqSize;
	height: $sqSize;
}
.block-inner > div {
	display: flex;
	flex-wrap: wrap;
	align-content: flex-start;
	position: absolute;
}
.block-inner {
	position: relative;
	width: $sqSize;
	transform-style: preserve-3d;
	transform: rotateX(-90deg) translateZ($sqSize);
}
.back {
	transform: translateZ(-$sqSize) rotateY(180deg);
}
.left {
	transform-origin: center left;
	transform: rotateY(270deg) translateX(-$sqSize);
}
.right {
	transform-origin: top right;
}
.top, .bottom {
	transform-origin: top center;
}

// * Render blocks *
// one block only
@if length(nth($blocks,1)) == 1 {
	.b1 {
		@include placeBlock(
			nth($blocks, 1),
			nth($blocks, 2),
			nth($blocks, 3),
			nth($blocks, 4),
			nth($blocks, 5),
			nth($blocks, 6),
			nth($blocks, 7)
		);
	}
}
// more than one block
@else {
	@for $b from 1 through length($blocks) {
		.b#{$b} {
			@include placeBlock(
				nth(nth($blocks, $b), 1),
				nth(nth($blocks, $b), 2),
				nth(nth($blocks, $b), 3),
				nth(nth($blocks, $b), 4),
				nth(nth($blocks, $b), 5),
				nth(nth($blocks, $b), 6),
				nth(nth($blocks, $b), 7)
			);
		}
	}
}
// * Render plates *
// one plate only
@if length(nth($plates,1)) == 1 {
	.p1 {
		@include placePlate(
			nth($plates, 1),
			nth($plates, 2),
			nth($plates, 3),
			nth($plates, 4),
			nth($plates, 5),
			nth($plates, 6),
			nth($plates, 7),
			nth($plates, 8),
			nth($plates, 9),
			nth($plates, 10),
			nth($plates, 11)
		);
	}
}
// more than one plate
@else {
	@for $p from 1 through length($plates) {
		.p#{$p} {
			@include placePlate(
				nth(nth($plates, $p), 1),
				nth(nth($plates, $p), 2),
				nth(nth($plates, $p), 3),
				nth(nth($plates, $p), 4),
				nth(nth($plates, $p), 5),
				nth(nth($plates, $p), 6),
				nth(nth($plates, $p), 7),
				nth(nth($plates, $p), 8),
				nth(nth($plates, $p), 9),
				nth(nth($plates, $p), 10),
				nth(nth($plates, $p), 11)
			);
		}
	}
}

.p2, .p4, .p5, .p6, .p7, .p9, .p10, .p11, .p13, .p14, .p15 {
	@include straight();
}
.p1, .p3, .p8, .p12 {
	@include curve();
}
.p16, .p17 {
	opacity: 0.33;
}
.p18, .p19, .p20, .p21, .p#{$plateCt} {
	animation: travel $dur linear infinite;
	&::before {
		animation: train $dur linear infinite;
		display: block;
		@include trainRot(-180,0);
	}
}
.p18, .p19, .p20, .p21 {
	&::before {
		content: "ðŸšƒ";
	}
}
.p#{$plateCt} {
	&::before {
		content: "ðŸš‚";
	}
}

// * Animation *
$trackSpcs: 36;
$cars: 5;
$p: 100% / $trackSpcs;
@for $c from 1 through $cars {
	.p#{18 + ($c - 1)}, .p#{18 + ($c - 1)}::before {
		animation-delay: 0s - ($dur/$trackSpcs) * ($c - 1);
	}
}

@keyframes travel {
	from, to {@include platePos(9,2,2.02);}
	#{$p*1.75} {@include platePos(10.75,2,2.02);}
	#{$p*2.25} {@include platePos(11,2.25,2.02);}
	#{$p*2.5} {@include platePos(11,2.5,2.02);}
	#{$p*3.5} {@include platePos(11,3.5,3.02);}
	#{$p*7.5} {@include platePos(11,7.5,3.02);}
	#{$p*8.5} {@include platePos(11,8.5,4.02);}
	#{$p*10.75} {@include platePos(11,10.75,4.02);}
	#{$p*11} {@include platePos(10.75,11,4.02);}
	#{$p*13.5} {@include platePos(8.5,11,4.02);}
	#{$p*14.5} {@include platePos(7.5,11,3.02);}
	#{$p*19.75} {@include platePos(2.25,11,3.02);}
	#{$p*20.25} {@include platePos(2,10.75,3.02);}
	#{$p*25.5} {@include platePos(2,5.5,3.02);}
	#{$p*26.5} {@include platePos(2,4.4,2.02);}
	#{$p*28.75} {@include platePos(2,2.25,2.02);}
	#{$p*29.25} {@include platePos(2.25,2,2.02);}
}
@keyframes train {
	from, #{$p*1.75} {@include trainRot(-180,0);}
	#{$p*3}, #{$p*8} {@include trainRot(-90,45);}
	#{$p*2.25}, #{$p*4}, #{$p*7}, #{$p*9}, #{$p*10.5} {@include trainRot(-90,0);}
	#{$p*11}, #{$p*13}, #{$p*15}, #{$p*19.75} {@include trainRot(0,0);}
	#{$p*14} {@include trainRot(0,-45);}
	#{$p*20.25}, #{$p*25}, #{$p*27}, #{$p*28.75} {@include trainRot(90,0);}
	#{$p*26} {@include trainRot(90,-45);}
	#{$p*29.25}, to {@include trainRot(180,0);}
}